import sys
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit,
    QPushButton, QListWidget, QListWidgetItem, QLabel, QMessageBox
)
from PyQt6.QtGui import QIcon, QPixmap
from PyQt6.QtCore import Qt, QSize
from urllib.parse import urlparse, parse_qs
import re
import requests
from datetime import datetime
import webbrowser
import os

FILENAME = "youtube_links_final.txt"
THUMB_DIR = "thumbnails"

# ---------------- Helpers ----------------
def sanitize_link(link: str) -> str:
    link = link.strip()
    if not link:
        return ""
    if link.startswith("www."):
        link = "https://" + link
    if link.startswith("youtu.be/") or link.startswith("youtube.com/") and not link.startswith("http"):
        link = "https://" + link
    if not link.startswith("http"):
        link = "https://" + link
    return link

def get_video_id(link):
    parsed = urlparse(link)
    if "youtu.be" in parsed.netloc:
        return parsed.path.lstrip("/")
    if "youtube" in parsed.netloc:
        qs = parse_qs(parsed.query)
        if "v" in qs:
            return qs["v"][0]
    if re.match(r"^[A-Za-z0-9_-]{11}$", link):
        return link
    return None

def download_thumbnail(video_id):
    if not os.path.exists(THUMB_DIR):
        os.makedirs(THUMB_DIR)
    thumbs = ["maxresdefault.jpg","sddefault.jpg","hqdefault.jpg","mqdefault.jpg","default.jpg"]
    local_path = os.path.join(THUMB_DIR, f"{video_id}.jpg")
    if os.path.exists(local_path):
        return local_path
    for t in thumbs:
        url = f"https://i.ytimg.com/vi/{video_id}/{t}"
        try:
            r = requests.get(url, timeout=5)
            if r.status_code == 200:
                with open(local_path, "wb") as f:
                    f.write(r.content)
                return local_path
        except:
            continue
    return None

# ---------------- Main App ----------------
class YouTubeWatchlist(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("YouTube Watchlist")
        self.setGeometry(100, 100, 1200, 750)
        self.setStyleSheet("background-color: #121212; color: white;")
        self.links = []
        self.load_links()
        self.init_ui()

    def init_ui(self):
        main_layout = QVBoxLayout()

        # Title and Link Entry
        entry_layout = QHBoxLayout()
        self.title_entry = QLineEdit()
        self.title_entry.setPlaceholderText("Video Title")
        self.title_entry.setStyleSheet("background-color: #1e1e1e; color: white; padding:5px; border-radius:5px;")
        self.link_entry = QLineEdit()
        self.link_entry.setPlaceholderText("YouTube Link")
        self.link_entry.setStyleSheet("background-color: #1e1e1e; color: white; padding:5px; border-radius:5px;")
        entry_layout.addWidget(self.title_entry)
        entry_layout.addWidget(self.link_entry)
        main_layout.addLayout(entry_layout)

        # Buttons
        btn_layout = QHBoxLayout()
        add_btn = QPushButton("Add")
        add_btn.setStyleSheet("background-color: #4CAF50; color: white; padding:8px; border-radius:5px;")
        add_btn.clicked.connect(self.add_link)
        paste_btn = QPushButton("Paste")
        paste_btn.setStyleSheet("background-color: #6a6a6a; color: white; padding:8px; border-radius:5px;")
        paste_btn.clicked.connect(self.paste_clipboard)
        watch_btn = QPushButton("Watch")
        watch_btn.setStyleSheet("background-color: #2196F3; color: white; padding:8px; border-radius:5px;")
        watch_btn.clicked.connect(self.watch_selected)
        delete_btn = QPushButton("Delete")
        delete_btn.setStyleSheet("background-color: #f44336; color: white; padding:8px; border-radius:5px;")
        delete_btn.clicked.connect(self.delete_selected)
        mark_btn = QPushButton("Mark as Watched")
        mark_btn.setStyleSheet("background-color: #FFD700; color: black; padding:8px; border-radius:5px;")
        mark_btn.clicked.connect(self.mark_selected)
        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(paste_btn)
        btn_layout.addWidget(watch_btn)
        btn_layout.addWidget(delete_btn)
        btn_layout.addWidget(mark_btn)
        main_layout.addLayout(btn_layout)

        # Search
        self.search_entry = QLineEdit()
        self.search_entry.setPlaceholderText("Search by Title")
        self.search_entry.setStyleSheet("background-color: #1e1e1e; color: white; padding:5px; border-radius:5px;")
        self.search_entry.textChanged.connect(self.refresh_list)
        main_layout.addWidget(self.search_entry)

        # List
        self.list_widget = QListWidget()
        self.list_widget.setStyleSheet("""
            QListWidget {
                background-color: #1e1e1e;
                color: white;
            }
            QListWidget::item:selected {
                background-color: #333333;
            }
        """)
        self.list_widget.setIconSize(QSize(250, 250))  # تكبير الصور
        main_layout.addWidget(self.list_widget)

        self.setLayout(main_layout)
        self.refresh_list()

    # ---------- Storage ----------
    def load_links(self):
        if os.path.exists(FILENAME):
            with open(FILENAME, "r", encoding="utf-8") as f:
                lines = [line.strip() for line in f.readlines() if line.strip()]
                for line in lines:
                    parts = line.split("|")
                    if len(parts) == 5:
                        title, link, watched, date, thumb_file = parts
                        self.links.append({
                            "title": title,
                            "link": link,
                            "watched": watched == "1",
                            "date": date,
                            "thumb_file": thumb_file
                        })

    def save_links(self):
        with open(FILENAME, "w", encoding="utf-8") as f:
            for item in self.links:
                f.write(f"{item['title']}|{item['link']}|{1 if item['watched'] else 0}|{item['date']}|{item['thumb_file']}\n")

    # ---------- Actions ----------
    def add_link(self):
        title = self.title_entry.text().strip()
        link = sanitize_link(self.link_entry.text())
        if not link:
            QMessageBox.warning(self, "Warning", "Please enter a link")
            return
        if not title:
            vid = get_video_id(link)
            title = f"Video {vid}" if vid else "Untitled"
        date = datetime.now().strftime("%Y-%m-%d %H:%M")
        vid = get_video_id(link)
        thumb_file = download_thumbnail(vid)
        self.links.append({
            "title": title,
            "link": link,
            "watched": False,
            "date": date,
            "thumb_file": thumb_file
        })
        self.title_entry.clear()
        self.link_entry.clear()
        self.save_links()
        self.refresh_list()

    def paste_clipboard(self):
        try:
            clip = QApplication.clipboard().text()
            if clip:
                self.link_entry.setText(clip)
                if not self.title_entry.text().strip():
                    vid = get_video_id(clip)
                    self.title_entry.setText(f"Video {vid}" if vid else "Untitled")
        except:
            pass

    def delete_selected(self):
        selected = self.list_widget.selectedItems()
        for item in selected:
            idx = self.list_widget.row(item)
            self.links.pop(idx)
        self.save_links()
        self.refresh_list()

    def mark_selected(self):
        selected = self.list_widget.selectedItems()
        for item in selected:
            idx = self.list_widget.row(item)
            self.links[idx]["watched"] = True
        self.save_links()
        self.refresh_list()

    def watch_selected(self):
        selected = self.list_widget.selectedItems()
        for item in selected:
            idx = self.list_widget.row(item)
            webbrowser.open(self.links[idx]["link"])

    # ---------- Refresh List with Elegant Design ----------
    def refresh_list(self):
        query = self.search_entry.text().lower()
        self.list_widget.clear()

        for item in self.links:
            if query in item["title"].lower():
                # إنشاء QWidget لكل عنصر
                widget = QWidget()
                widget.setStyleSheet("""
                    background-color: #1e1e1e;
                    border: 2px solid #444;
                    border-radius: 8px;
                    margin:5px;
                """)
                layout = QHBoxLayout()
                layout.setContentsMargins(5,5,5,5)

                # صورة مصغرة
                if item.get("thumb_file") and os.path.exists(item["thumb_file"]):
                    pixmap = QPixmap(item["thumb_file"]).scaled(250, 250, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
                    img_label = QLabel()
                    img_label.setPixmap(pixmap)
                    layout.addWidget(img_label)

                # معلومات الفيديو (اسم + تاريخ + حالة)
                info_layout = QVBoxLayout()
                title_label = QLabel(item["title"])
                title_label.setStyleSheet("color: white; font-weight: bold; font-size: 16px;")
                title_label.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)
                # اكتشاف اللغة العربية لتفعيل RTL
                if re.search(r'[\u0600-\u06FF]', item["title"]):
                    title_label.setLayoutDirection(Qt.LayoutDirection.RightToLeft)
                else:
                    title_label.setLayoutDirection(Qt.LayoutDirection.LeftToRight)
                info_layout.addWidget(title_label)

                date_label = QLabel(item["date"])
                date_label.setStyleSheet("color: #aaaaaa; font-size: 13px;")
                date_label.setAlignment(Qt.AlignmentFlag.AlignRight)
                info_layout.addWidget(date_label)

                status_text = "🏆 Watched" if item["watched"] else "❌ Not watched"
                status_label = QLabel(status_text)
                status_label.setAlignment(Qt.AlignmentFlag.AlignRight)
                status_label.setStyleSheet("font-size: 14px;")
                info_layout.addWidget(status_label)

                layout.addLayout(info_layout)
                widget.setLayout(layout)

                # إضافة QWidget داخل QListWidgetItem
                list_item = QListWidgetItem()
                list_item.setSizeHint(widget.sizeHint())
                self.list_widget.addItem(list_item)
                self.list_widget.setItemWidget(list_item, widget)

# ----------------
# ---------------- Run ----------------
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = YouTubeWatchlist()
    window.show()
    sys.exit(app.exec())
