import sys
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit,
    QPushButton, QTableWidget, QTableWidgetItem, QHeaderView, 
    QAbstractItemView, QLabel, QMessageBox, QFrame, QScrollArea
)
from PyQt6.QtGui import QIcon, QPixmap, QFont, QColor
from PyQt6.QtCore import Qt, QSize
from urllib.parse import urlparse, parse_qs
import re
import requests
from datetime import datetime
import webbrowser
import os

FILENAME = "youtube_links_final.txt"
THUMB_DIR = "thumbnails"

# ---------------- Helpers ----------------
def sanitize_link(link: str) -> str:
    link = link.strip()
    if not link:
        return ""
    if link.startswith("www."):
        link = "https://" + link
    if link.startswith("youtu.be/") or link.startswith("youtube.com/") and not link.startswith("http"):
        link = "https://" + link
    if not link.startswith("http"):
        link = "https://" + link
    return link

def get_video_id(link):
    parsed = urlparse(link)
    if "youtu.be" in parsed.netloc:
        return parsed.path.lstrip("/")
    if "youtube" in parsed.netloc:
        qs = parse_qs(parsed.query)
        if "v" in qs:
            return qs["v"][0]
    if re.match(r"^[A-Za-z0-9_-]{11}$", link):
        return link
    return None

def download_thumbnail(video_id):
    if not os.path.exists(THUMB_DIR):
        os.makedirs(THUMB_DIR)
    thumbs = ["maxresdefault.jpg","sddefault.jpg","hqdefault.jpg","mqdefault.jpg","default.jpg"]
    local_path = os.path.join(THUMB_DIR, f"{video_id}.jpg")
    if os.path.exists(local_path):
        return local_path
    for t in thumbs:
        url = f"https://i.ytimg.com/vi/{video_id}/{t}"
        try:
            r = requests.get(url, timeout=5)
            if r.status_code == 200:
                with open(local_path, "wb") as f:
                    f.write(r.content)
                return local_path
        except:
            continue
    return None

# ---------------- Main App ----------------
class YouTubeWatchlist(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("YouTube Watchlist")
        self.setGeometry(100, 100, 1400, 850)
        self.setStyleSheet("""
            background-color: #0f0f0f; 
            color: #ffffff;
            font-family: 'Segoe UI', Arial, sans-serif;
        """)
        self.links = []
        self.load_links()
        self.init_ui()

    def init_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # Header
        header = QLabel("YouTube Watchlist")
        header.setStyleSheet("""
            font-size: 28px; 
            font-weight: bold; 
            color: #ff0000; 
            padding: 15px;
            background-color: #1a1a1a;
            border-radius: 10px;
        """)
        header.setAlignment(Qt.AlignmentFlag.AlignCenter)
        main_layout.addWidget(header)

        # Input Section
        input_frame = QFrame()
        input_frame.setStyleSheet("""
            QFrame {
                background-color: #1a1a1a;
                border-radius: 10px;
                padding: 15px;
            }
        """)
        input_layout = QVBoxLayout(input_frame)
        
        # Title input
        title_layout = QHBoxLayout()
        title_label = QLabel("Video Title:")
        title_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #aaaaaa; min-width: 100px;")
        self.title_entry = QLineEdit()
        self.title_entry.setPlaceholderText("Enter video title...")
        self.title_entry.setStyleSheet("""
            QLineEdit {
                background-color: #2a2a2a; 
                color: white; 
                border: 2px solid #333; 
                border-radius: 6px; 
                padding: 10px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 2px solid #ff4444;
            }
        """)
        title_layout.addWidget(title_label)
        title_layout.addWidget(self.title_entry)
        input_layout.addLayout(title_layout)
        
        # Link input
        link_layout = QHBoxLayout()
        link_label = QLabel("YouTube Link:")
        link_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #aaaaaa; min-width: 100px;")
        self.link_entry = QLineEdit()
        self.link_entry.setPlaceholderText("Paste YouTube link here...")
        self.link_entry.setStyleSheet("""
            QLineEdit {
                background-color: #2a2a2a; 
                color: white; 
                border: 2px solid #333; 
                border-radius: 6px; 
                padding: 10px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 2px solid #ff4444;
            }
        """)
        link_layout.addWidget(link_label)
        link_layout.addWidget(self.link_entry)
        input_layout.addLayout(link_layout)
        
        main_layout.addWidget(input_frame)

        # Buttons Section
        buttons_frame = QFrame()
        buttons_frame.setStyleSheet("""
            QFrame {
                background-color: #1a1a1a;
                border-radius: 10px;
                padding: 10px;
            }
        """)
        buttons_layout = QHBoxLayout(buttons_frame)
        buttons_layout.setSpacing(10)
        
        add_btn = self.create_button("Add Video", "#4CAF50", 16)
        add_btn.clicked.connect(self.add_link)
        
        paste_btn = self.create_button("Paste Link", "#607D8B", 16)
        paste_btn.clicked.connect(self.paste_clipboard)
        
        watch_btn = self.create_button("Watch Selected", "#2196F3", 16)
        watch_btn.clicked.connect(self.watch_selected)
        
        delete_btn = self.create_button("Delete Selected", "#f44336", 16)
        delete_btn.clicked.connect(self.delete_selected)
        
        mark_btn = self.create_button("Mark as Watched", "#FFD700", 16, "#000000")
        mark_btn.clicked.connect(self.mark_selected)
        
        buttons_layout.addWidget(add_btn)
        buttons_layout.addWidget(paste_btn)
        buttons_layout.addWidget(watch_btn)
        buttons_layout.addWidget(delete_btn)
        buttons_layout.addWidget(mark_btn)
        
        main_layout.addWidget(buttons_frame)

        # Search Section
        search_frame = QFrame()
        search_frame.setStyleSheet("""
            QFrame {
                background-color: #1a1a1a;
                border-radius: 10px;
                padding: 15px;
            }
        """)
        search_layout = QHBoxLayout(search_frame)
        
        search_label = QLabel("Search Videos:")
        search_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #aaaaaa;")
        self.search_entry = QLineEdit()
        self.search_entry.setPlaceholderText("Search by title...")
        self.search_entry.setStyleSheet("""
            QLineEdit {
                background-color: #2a2a2a; 
                color: white; 
                border: 2px solid #333; 
                border-radius: 6px; 
                padding: 10px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 2px solid #ff4444;
            }
        """)
        self.search_entry.textChanged.connect(self.refresh_list)
        
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_entry)
        main_layout.addWidget(search_frame)

        # Table Section
        table_frame = QFrame()
        table_frame.setStyleSheet("""
            QFrame {
                background-color: #1a1a1a;
                border-radius: 10px;
                padding: 15px;
            }
        """)
        table_layout = QVBoxLayout(table_frame)
        
        # Create table with columns
        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(5)
        self.table_widget.setHorizontalHeaderLabels(["Thumbnail", "Title", "Date Added", "Status", "Actions"])
        
        # Set header styles
        header_style = """
            QHeaderView::section {
                background-color: #ff0000;
                color: white;
                padding: 12px;
                border: none;
                font-weight: bold;
                font-size: 14px;
            }
        """
        self.table_widget.horizontalHeader().setStyleSheet(header_style)
        self.table_widget.verticalHeader().setVisible(False)
        
        # Configure column resize modes
        self.table_widget.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        self.table_widget.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        self.table_widget.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)
        self.table_widget.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)
        self.table_widget.horizontalHeader().setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)
        
        self.table_widget.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.table_widget.setStyleSheet("""
            QTableWidget {
                background-color: #2a2a2a;
                color: white;
                border: 1px solid #333;
                gridline-color: #333;
                border-radius: 8px;
                alternate-background-color: #252525;
            }
            QTableWidget::item {
                padding: 12px;
                border-bottom: 1px solid #333;
                font-size: 14px;
            }
            QTableWidget::item:selected {
                background-color: #3a3a3a;
            }
            QScrollBar:vertical {
                background: #1a1a1a;
                width: 12px;
                margin: 0px;
            }
            QScrollBar::handle:vertical {
                background: #ff0000;
                min-height: 20px;
                border-radius: 6px;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
        """)
        self.table_widget.setAlternatingRowColors(True)
        
        table_layout.addWidget(self.table_widget)
        main_layout.addWidget(table_frame)

        self.setLayout(main_layout)
        self.refresh_list()

    def create_button(self, text, color, font_size=14, text_color="#ffffff"):
        button = QPushButton(text)
        button.setStyleSheet(f"""
            QPushButton {{
                background-color: {color};
                color: {text_color};
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                font-weight: bold;
                font-size: {font_size}px;
            }}
            QPushButton:hover {{
                background-color: {self.lighten_color(color)};
            }}
            QPushButton:pressed {{
                background-color: {self.darken_color(color)};
            }}
            QPushButton:disabled {{
                background-color: #555555;
                color: #999999;
            }}
        """)
        return button

    def lighten_color(self, hex_color):
        # Convert hex to RGB
        r = int(hex_color[1:3], 16)
        g = int(hex_color[3:5], 16)
        b = int(hex_color[5:7], 16)
        
        # Lighten by 20%
        r = min(255, int(r * 1.2))
        g = min(255, int(g * 1.2))
        b = min(255, int(b * 1.2))
        
        return f"#{r:02x}{g:02x}{b:02x}"

    def darken_color(self, hex_color):
        # Convert hex to RGB
        r = int(hex_color[1:3], 16)
        g = int(hex_color[3:5], 16)
        b = int(hex_color[5:7], 16)
        
        # Darken by 20%
        r = max(0, int(r * 0.8))
        g = max(0, int(g * 0.8))
        b = max(0, int(b * 0.8))
        
        return f"#{r:02x}{g:02x}{b:02x}"

    # ---------- Storage ----------
    def load_links(self):
        if os.path.exists(FILENAME):
            try:
                with open(FILENAME, "r", encoding="utf-8") as f:
                    lines = [line.strip() for line in f.readlines() if line.strip()]
                    for line in lines:
                        parts = line.split("|")
                        if len(parts) == 5:
                            title, link, watched, date, thumb_file = parts
                            self.links.append({
                                "title": title,
                                "link": link,
                                "watched": watched == "1",
                                "date": date,
                                "thumb_file": thumb_file
                            })
            except Exception as e:
                QMessageBox.warning(self, "Error", f"Failed to load data: {str(e)}")

    def save_links(self):
        try:
            with open(FILENAME, "w", encoding="utf-8") as f:
                for item in self.links:
                    f.write(f"{item['title']}|{item['link']}|{1 if item['watched'] else 0}|{item['date']}|{item['thumb_file']}\n")
        except Exception as e:
            QMessageBox.warning(self, "Error", f"Failed to save data: {str(e)}")

    # ---------- Actions ----------
    def add_link(self):
        title = self.title_entry.text().strip()
        link = sanitize_link(self.link_entry.text())
        
        if not link:
            QMessageBox.warning(self, "Warning", "Please enter a valid YouTube link")
            return
            
        if not title:
            vid = get_video_id(link)
            title = f"Video {vid}" if vid else "Untitled Video"
            
        date = datetime.now().strftime("%Y-%m-%d %H:%M")
        vid = get_video_id(link)
        thumb_file = download_thumbnail(vid)
        
        self.links.append({
            "title": title,
            "link": link,
            "watched": False,
            "date": date,
            "thumb_file": thumb_file
        })
        
        self.title_entry.clear()
        self.link_entry.clear()
        self.save_links()
        self.refresh_list()
        
        QMessageBox.information(self, "Success", "Video added to your watchlist!")

    def paste_clipboard(self):
        try:
            clip = QApplication.clipboard().text()
            if clip:
                self.link_entry.setText(clip)
                if not self.title_entry.text().strip():
                    vid = get_video_id(clip)
                    self.title_entry.setText(f"Video {vid}" if vid else "Untitled Video")
        except Exception as e:
            QMessageBox.warning(self, "Error", f"Failed to paste from clipboard: {str(e)}")

    def delete_selected(self):
        selected = self.table_widget.selectedItems()
        if not selected:
            QMessageBox.warning(self, "Warning", "Please select a video to delete")
            return
            
        # Confirm deletion
        reply = QMessageBox.question(self, "Confirm Delete", 
                                   "Are you sure you want to delete the selected videos?",
                                   QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        
        if reply != QMessageBox.StandardButton.Yes:
            return
            
        # Get unique rows from selected items
        rows = set()
        for item in selected:
            rows.add(item.row())
        
        # Sort in reverse order to avoid index issues when deleting
        rows = sorted(rows, reverse=True)
        
        for row in rows:
            self.links.pop(row)
            
        self.save_links()
        self.refresh_list()

    def mark_selected(self):
        selected = self.table_widget.selectedItems()
        if not selected:
            QMessageBox.warning(self, "Warning", "Please select a video to mark as watched")
            return
            
        # Get unique rows from selected items
        rows = set()
        for item in selected:
            rows.add(item.row())
        
        for row in rows:
            self.links[row]["watched"] = True
            
        self.save_links()
        self.refresh_list()

    def watch_selected(self):
        selected = self.table_widget.selectedItems()
        if not selected:
            QMessageBox.warning(self, "Warning", "Please select a video to watch")
            return
            
        # Get unique rows from selected items
        rows = set()
        for item in selected:
            rows.add(item.row())
        
        for row in rows:
            webbrowser.open(self.links[row]["link"])

    def refresh_list(self):
        query = self.search_entry.text().lower()
        self.table_widget.setRowCount(0)
        
        for idx, item in enumerate(self.links):
            if query in item["title"].lower():
                row = self.table_widget.rowCount()
                self.table_widget.insertRow(row)
                
                # Thumbnail column
                thumbnail_item = QTableWidgetItem()
                if item.get("thumb_file") and os.path.exists(item["thumb_file"]):
                    pixmap = QPixmap(item["thumb_file"])
                    pixmap = pixmap.scaled(160, 90, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
                    thumbnail_item.setData(Qt.ItemDataRole.DecorationRole, pixmap)
                thumbnail_item.setFlags(thumbnail_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.table_widget.setItem(row, 0, thumbnail_item)
                
                # Title column
                title_item = QTableWidgetItem(item["title"])
                title_item.setFlags(title_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                title_font = QFont()
                title_font.setPointSize(12)
                title_font.setBold(True)
                title_item.setFont(title_font)
                self.table_widget.setItem(row, 1, title_item)
                
                # Date column
                date_item = QTableWidgetItem(item["date"])
                date_item.setFlags(date_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                date_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                self.table_widget.setItem(row, 2, date_item)
                
                # Status column
                status_item = QTableWidgetItem("✅ Watched" if item["watched"] else "⏳ Not Watched")
                status_item.setFlags(status_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                status_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                if item["watched"]:
                    status_item.setForeground(QColor("#4CAF50"))
                else:
                    status_item.setForeground(QColor("#FFD700"))
                self.table_widget.setItem(row, 3, status_item)
                
                # Actions column
                action_item = QTableWidgetItem("▶️ Watch Now")
                action_item.setFlags(action_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                action_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                action_item.setData(Qt.ItemDataRole.UserRole, item["link"])  # Store link for opening
                action_item.setForeground(QColor("#2196F3"))
                self.table_widget.setItem(row, 4, action_item)
                
                # Set row height to accommodate thumbnail
                self.table_widget.setRowHeight(row, 100)
        
        # Update table header
        self.table_widget.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        self.table_widget.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        self.table_widget.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)
        self.table_widget.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)
        self.table_widget.horizontalHeader().setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)
        
        # Connect double-click event to open video
        self.table_widget.cellDoubleClicked.connect(self.on_cell_double_clicked)
    
    def on_cell_double_clicked(self, row, column):
        if 0 <= row < len(self.links):
            webbrowser.open(self.links[row]["link"])

# ---------------- Run ----------------
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = YouTubeWatchlist()
    window.show()
    sys.exit(app.exec())
